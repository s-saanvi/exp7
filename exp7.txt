import numpy as np, pandas as pd, matplotlib.pyplot as plt
from sklearn.datasets import fetch_california_housing
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.pipeline import make_pipeline
from sklearn.metrics import mean_squared_error

X, y = fetch_california_housing(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(StandardScaler().fit_transform(X), y, test_size=0.2, random_state=42)
pred = LinearRegression().fit(X_train, y_train).predict(X_test)
print(f"CA Housing LR MSE: {mean_squared_error(y_test, pred):.4f}")
plt.scatter(y_test, pred, alpha=0.5), plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.title("California Housing"), plt.xlabel("Actual"), plt.ylabel("Predicted"), plt.show()

df = pd.read_csv("https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv").dropna()
X2, y2 = df[['horsepower']], df['mpg']
X2_tr, X2_te, y2_tr, y2_te = train_test_split(X2, y2, test_size=0.2, random_state=42)
model = make_pipeline(PolynomialFeatures(3), LinearRegression()).fit(X2_tr, y2_tr)
pred2 = model.predict(X2_te)
print(f"MPG PolyReg MSE: {mean_squared_error(y2_te, pred2):.4f}")
idx = np.argsort(X2_te.values.flatten())
plt.scatter(X2_te, y2_te, alpha=0.5), plt.plot(X2_te.values.flatten()[idx], pred2[idx], 'r')
plt.title("MPG Polynomial Fit"), plt.xlabel("Horsepower"), plt.ylabel("MPG"), plt.show()
